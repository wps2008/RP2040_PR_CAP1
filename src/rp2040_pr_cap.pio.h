// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// pr_cap //
// ------ //

#define pr_cap_wrap_target 0
#define pr_cap_wrap 4

static const uint16_t pr_cap_program_instructions[] = {
            //     .wrap_target
    0x201c, //  0: wait   0 gpio, 28                 
    0xa0c0, //  1: mov    isr, pins                  
    0x8020, //  2: push   block                      
    0x209c, //  3: wait   1 gpio, 28                 
    0x0000, //  4: jmp    0                          
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pr_cap_program = {
    .instructions = pr_cap_program_instructions,
    .length = 5,
    .origin = -1,
};

static inline pio_sm_config pr_cap_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pr_cap_wrap_target, offset + pr_cap_wrap);
    return c;
}

static inline void pr_cap_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = pr_cap_program_get_default_config(offset);
    // Map the state machine's IN pin group to one pin, namely the `pin`
    // parameter to this function.
    //sm_config_set_in_pins(&c, pin);
    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    //sm_config_set_out_pins(&c, pin, 1);
    // Set this pin's GPIO function (connect PIO to the pad)
    //pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    //pio_sm_set_consecutive_pindirs(pio, sm, pin, 8, false);
    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
}

#endif

